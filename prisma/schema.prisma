generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id              String           @id @default(cuid())
  name            String
  code            String           @unique
  address         String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  studentAttempts StudentAttempt[]
  tests           Test[]
  users           User[]

  @@map("schools")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  password      String
  role          UserRole       @default(TEACHER)
  schoolId      String
  avatarUrl     String?
  isActive      Boolean        @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]
  tests         Test[]
  school        School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@index([email], map: "idx_users_email")
  @@index([schoolId], map: "idx_users_school_id")
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Test {
  id               String           @id @default(cuid())
  title            String
  description      String?
  type             TestType         @default(MULTIPLE_CHOICE)
  status           TestStatus       @default(DRAFT)
  duration         Int?
  subjects         String[]
  targetGrades     String[]
  instructions     String?
  allowReview      Boolean          @default(false)
  shuffleQuestions Boolean          @default(false)
  showResults      Boolean          @default(true)
  accessCode       String?          @unique
  totalPoints      Int              @default(0)
  questionsCount   Int              @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  createdById      String
  schoolId         String?
  maxAttempts      Int              @default(1)
  shuffleOptions   Boolean          @default(false)
  studentAttempts  StudentAttempt[]
  questions        TestQuestion[]
  createdBy        User             @relation(fields: [createdById], references: [id], onDelete: Cascade)
  school           School?          @relation(fields: [schoolId], references: [id])

  @@index([createdById], map: "idx_tests_created_by")
  @@index([schoolId], map: "idx_tests_school_id")
  @@index([status], map: "idx_tests_status")
  @@index([accessCode], map: "idx_tests_access_code")
  @@map("tests")
}

model Question {
  id            String         @id @default(cuid())
  statement     String
  alternatives  String[]
  correctAnswer Int
  subject       String
  grade         Int?
  difficulty    Difficulty     @default(MEDIUM)
  tags          String[]
  hasMath       Boolean        @default(false)
  externalId    String?        @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  topic         String?
  testQuestions TestQuestion[]

  @@index([subject], map: "idx_questions_subject")
  @@index([difficulty], map: "idx_questions_difficulty")
  @@index([grade], map: "idx_questions_grade")
  @@index([externalId], map: "idx_questions_external_id")
  @@map("questions")
}

model TestQuestion {
  id         String   @id @default(cuid())
  testId     String
  questionId String
  points     Int
  orderNum   Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  test       Test     @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@unique([testId, orderNum])
  @@map("test_questions")
}

model StudentAttempt {
  id          String    @id @default(cuid())
  testId      String
  studentName String
  schoolId    String
  grade       String
  classroom   String
  answers     Json?
  score       Int?
  totalPoints Int?
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  duration    Int?
  analytics   Json?
  school      School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  test        Test      @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@index([testId], map: "idx_student_attempts_test_id")
  @@index([schoolId], map: "idx_student_attempts_school_id")
  @@index([startedAt], map: "idx_student_attempts_started_at")
  @@index([testId, studentName], map: "idx_student_attempts_test_student")
  @@index([schoolId, testId], map: "idx_student_attempts_school_test")
  @@index([testId, completedAt], map: "idx_student_attempts_test_completed")
  @@map("student_attempts")
}

enum UserRole {
  TEACHER
  STAFF
  ADMIN
  STUDENT
}

enum TestType {
  PRIVATE
  COLLABORATIVE
  MULTIPLE_CHOICE
  ESSAY
  MIXED
}

enum TestStatus {
  ACTIVE
  COMPLETED
  EDITING
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
